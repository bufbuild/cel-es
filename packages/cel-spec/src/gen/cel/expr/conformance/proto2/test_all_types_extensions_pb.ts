// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=.js,ts_nocheck=false"
// @generated from file cel/expr/conformance/proto2/test_all_types_extensions.proto (package cel.expr.conformance.proto2, syntax proto2)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto2 } from "@bufbuild/protobuf";
import { TestAllTypes, TestAllTypes_NestedEnum } from "./test_all_types_pb.js";

/**
 * Message scoped extensions
 *
 * @generated from message cel.expr.conformance.proto2.Proto2ExtensionScopedMessage
 */
export class Proto2ExtensionScopedMessage extends Message<Proto2ExtensionScopedMessage> {
  constructor(data?: PartialMessage<Proto2ExtensionScopedMessage>) {
    super();
    proto2.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto2 = proto2;
  static readonly typeName = "cel.expr.conformance.proto2.Proto2ExtensionScopedMessage";
  static readonly fields: FieldList = proto2.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proto2ExtensionScopedMessage {
    return new Proto2ExtensionScopedMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proto2ExtensionScopedMessage {
    return new Proto2ExtensionScopedMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proto2ExtensionScopedMessage {
    return new Proto2ExtensionScopedMessage().fromJsonString(jsonString, options);
  }

  static equals(a: Proto2ExtensionScopedMessage | PlainMessage<Proto2ExtensionScopedMessage> | undefined, b: Proto2ExtensionScopedMessage | PlainMessage<Proto2ExtensionScopedMessage> | undefined): boolean {
    return proto2.util.equals(Proto2ExtensionScopedMessage, a, b);
  }
}

/**
 * @generated from extension: optional int64 int64_ext = 1005;
 */
export const Proto2ExtensionScopedMessage_int64_ext = proto2.makeExtension<TestAllTypes, bigint>(
  "cel.expr.conformance.proto2.Proto2ExtensionScopedMessage.int64_ext", 
  TestAllTypes, 
  { no: 1005, kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
);

/**
 * @generated from extension: optional cel.expr.conformance.proto2.TestAllTypes message_scoped_nested_ext = 1006;
 */
export const Proto2ExtensionScopedMessage_message_scoped_nested_ext = proto2.makeExtension<TestAllTypes, TestAllTypes>(
  "cel.expr.conformance.proto2.Proto2ExtensionScopedMessage.message_scoped_nested_ext", 
  TestAllTypes, 
  () => ({ no: 1006, kind: "message", T: TestAllTypes, opt: true }),
);

/**
 * @generated from extension: optional cel.expr.conformance.proto2.TestAllTypes.NestedEnum nested_enum_ext = 1007;
 */
export const Proto2ExtensionScopedMessage_nested_enum_ext = proto2.makeExtension<TestAllTypes, TestAllTypes_NestedEnum>(
  "cel.expr.conformance.proto2.Proto2ExtensionScopedMessage.nested_enum_ext", 
  TestAllTypes, 
  () => ({ no: 1007, kind: "enum", T: proto2.getEnumType(TestAllTypes_NestedEnum), opt: true }),
);

/**
 * @generated from extension: repeated cel.expr.conformance.proto2.TestAllTypes message_scoped_repeated_test_all_types = 1008;
 */
export const Proto2ExtensionScopedMessage_message_scoped_repeated_test_all_types = proto2.makeExtension<TestAllTypes, TestAllTypes[]>(
  "cel.expr.conformance.proto2.Proto2ExtensionScopedMessage.message_scoped_repeated_test_all_types", 
  TestAllTypes, 
  () => ({ no: 1008, kind: "message", T: TestAllTypes, repeated: true }),
);

/**
 * @generated from extension: optional int32 int32_ext = 1000;
 */
export const int32_ext = proto2.makeExtension<TestAllTypes, number>(
  "cel.expr.conformance.proto2.int32_ext", 
  TestAllTypes, 
  { no: 1000, kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
);

/**
 * @generated from extension: optional cel.expr.conformance.proto2.TestAllTypes nested_ext = 1001;
 */
export const nested_ext = proto2.makeExtension<TestAllTypes, TestAllTypes>(
  "cel.expr.conformance.proto2.nested_ext", 
  TestAllTypes, 
  () => ({ no: 1001, kind: "message", T: TestAllTypes, opt: true }),
);

/**
 * @generated from extension: optional cel.expr.conformance.proto2.TestAllTypes test_all_types_ext = 1002;
 */
export const test_all_types_ext = proto2.makeExtension<TestAllTypes, TestAllTypes>(
  "cel.expr.conformance.proto2.test_all_types_ext", 
  TestAllTypes, 
  () => ({ no: 1002, kind: "message", T: TestAllTypes, opt: true }),
);

/**
 * @generated from extension: optional cel.expr.conformance.proto2.TestAllTypes.NestedEnum nested_enum_ext = 1003;
 */
export const nested_enum_ext = proto2.makeExtension<TestAllTypes, TestAllTypes_NestedEnum>(
  "cel.expr.conformance.proto2.nested_enum_ext", 
  TestAllTypes, 
  () => ({ no: 1003, kind: "enum", T: proto2.getEnumType(TestAllTypes_NestedEnum), opt: true }),
);

/**
 * @generated from extension: repeated cel.expr.conformance.proto2.TestAllTypes repeated_test_all_types = 1004;
 */
export const repeated_test_all_types = proto2.makeExtension<TestAllTypes, TestAllTypes[]>(
  "cel.expr.conformance.proto2.repeated_test_all_types", 
  TestAllTypes, 
  () => ({ no: 1004, kind: "message", T: TestAllTypes, repeated: true }),
);

