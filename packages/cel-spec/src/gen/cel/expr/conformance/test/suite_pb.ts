// Copyright 2024-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Unit tests and end-to-end conformance tests.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.js,ts_nocheck=false"
// @generated from file cel/expr/conformance/test/suite.proto (package cel.expr.conformance.test, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Type } from "../../checked_pb.js";
import { file_cel_expr_checked } from "../../checked_pb.js";
import type { ErrorSet, UnknownSet } from "../../eval_pb.js";
import { file_cel_expr_eval } from "../../eval_pb.js";
import type { Value } from "../../value_pb.js";
import { file_cel_expr_value } from "../../value_pb.js";
import type { Environment } from "../env_config_pb.js";
import { file_cel_expr_conformance_env_config } from "../env_config_pb.js";
import type { Any } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cel/expr/conformance/test/suite.proto.
 */
export const file_cel_expr_conformance_test_suite: GenFile = /*@__PURE__*/
  fileDesc("CiVjZWwvZXhwci9jb25mb3JtYW5jZS90ZXN0L3N1aXRlLnByb3RvEhljZWwuZXhwci5jb25mb3JtYW5jZS50ZXN0ImgKCVRlc3RTdWl0ZRIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEjgKCHNlY3Rpb25zGAMgAygLMiYuY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdC5UZXN0U2VjdGlvbiJkCgtUZXN0U2VjdGlvbhIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEjIKBXRlc3RzGAMgAygLMiMuY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdC5UZXN0Q2FzZSKzAwoIVGVzdENhc2USDAoEbmFtZRgBIAEoCRITCgtkZXNjcmlwdGlvbhgCIAEoCRIMCgRleHByGAMgASgJEi4KA2VudhgEIAEoCzIhLmNlbC5leHByLmNvbmZvcm1hbmNlLkVudmlyb25tZW50Ej0KBWlucHV0GAUgAygLMi4uY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdC5UZXN0Q2FzZS5JbnB1dEVudHJ5Ej4KDWlucHV0X2NvbnRleHQYBiABKAsyJy5jZWwuZXhwci5jb25mb3JtYW5jZS50ZXN0LklucHV0Q29udGV4dBI1CgZvdXRwdXQYByABKAsyJS5jZWwuZXhwci5jb25mb3JtYW5jZS50ZXN0LlRlc3RPdXRwdXQSJAoMZGVkdWNlZF90eXBlGAggASgLMg4uY2VsLmV4cHIuVHlwZRIVCg1kaXNhYmxlX2NoZWNrGAkgASgIGlMKCklucHV0RW50cnkSCwoDa2V5GAEgASgJEjQKBXZhbHVlGAIgASgLMiUuY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdC5JbnB1dFZhbHVlOgI4ASJtCgxJbnB1dENvbnRleHQSLwoPY29udGV4dF9tZXNzYWdlGAEgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUgAEhYKDGNvbnRleHRfZXhwchgCIAEoCUgAQhQKEmlucHV0X2NvbnRleHRfa2luZCJGCgpJbnB1dFZhbHVlEiAKBXZhbHVlGAEgASgLMg8uY2VsLmV4cHIuVmFsdWVIABIOCgRleHByGAIgASgJSABCBgoEa2luZCKuAQoKVGVzdE91dHB1dBInCgxyZXN1bHRfdmFsdWUYCCABKAsyDy5jZWwuZXhwci5WYWx1ZUgAEhUKC3Jlc3VsdF9leHByGAkgASgJSAASKAoKZXZhbF9lcnJvchgKIAEoCzISLmNlbC5leHByLkVycm9yU2V0SAASJwoHdW5rbm93bhgLIAEoCzIULmNlbC5leHByLlVua25vd25TZXRIAEINCgtyZXN1bHRfa2luZEJPCh1kZXYuY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdEIKU3VpdGVQcm90b1ABWh1jZWwuZGV2L2V4cHIvY29uZm9ybWFuY2UvdGVzdPgBAWIGcHJvdG8z", [file_cel_expr_checked, file_cel_expr_eval, file_cel_expr_value, file_cel_expr_conformance_env_config, file_google_protobuf_any]);

/**
 * A test suite is a collection of tests designed to evaluate the correctness of
 * a CEL policy, a CEL expression or the conformance of a CEL implementation to
 * the standard specification.
 *
 * @generated from message cel.expr.conformance.test.TestSuite
 */
export type TestSuite = Message<"cel.expr.conformance.test.TestSuite"> & {
  /**
   * The name of the test suite.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Description of the test suite.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Test sections of the test suite.
   * Each section represents a behavior to be tested.
   *
   * @generated from field: repeated cel.expr.conformance.test.TestSection sections = 3;
   */
  sections: TestSection[];
};

/**
 * Describes the message cel.expr.conformance.test.TestSuite.
 * Use `create(TestSuiteSchema)` to create a new message.
 */
export const TestSuiteSchema: GenMessage<TestSuite> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 0);

/**
 * A collection of related test cases.
 *
 * @generated from message cel.expr.conformance.test.TestSection
 */
export type TestSection = Message<"cel.expr.conformance.test.TestSection"> & {
  /**
   * Name of the test section.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Description of the test section.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Test cases of the test section.
   * Each test case represents a test scenario.
   *
   * @generated from field: repeated cel.expr.conformance.test.TestCase tests = 3;
   */
  tests: TestCase[];
};

/**
 * Describes the message cel.expr.conformance.test.TestSection.
 * Use `create(TestSectionSchema)` to create a new message.
 */
export const TestSectionSchema: GenMessage<TestSection> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 1);

/**
 * A test to validate a CEL policy or expression. The test case encompasses
 * evaluation of the compiled expression using the provided input bindings and
 * asserting the result against the expected result.
 * It can also validate a raw CEL expression string through parse, check and
 * eval stages, making use of the augmenting CEL environment if provided.
 *
 * @generated from message cel.expr.conformance.test.TestCase
 */
export type TestCase = Message<"cel.expr.conformance.test.TestCase"> & {
  /**
   * Name of the test case.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A description of the test.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The text of the CEL expression.
   *
   * @generated from field: string expr = 3;
   */
  expr: string;

  /**
   * Serialized environment to be used for compilation and evaluation of the
   * CEL expression for the current test case.
   * This option allows validating the same expression against multiple
   * environments.
   *
   * @generated from field: cel.expr.conformance.Environment env = 4;
   */
  env?: Environment;

  /**
   * A map representing a variable binding where the key is the name of the
   * input variable.
   *
   * @generated from field: map<string, cel.expr.conformance.test.InputValue> input = 5;
   */
  input: { [key: string]: InputValue };

  /**
   * Input in the form of a context proto for the test case.
   * Note: Only one of `input_bindings` and `input_context` can be provided. Providing
   * both should result in an error.
   *
   * @generated from field: cel.expr.conformance.test.InputContext input_context = 6;
   */
  inputContext?: InputContext;

  /**
   * Expected result of the test case.
   *
   * @generated from field: cel.expr.conformance.test.TestOutput output = 7;
   */
  output?: TestOutput;

  /**
   * If specified validates that the deduced type at check time matches
   * If the result kind is not set and this field is set, the test is considered
   * "check-only".
   *
   * @generated from field: cel.expr.Type deduced_type = 8;
   */
  deducedType?: Type;

  /**
   * Bypass the type-checking and only attempt to evaluate the parsed
   * expression.
   *
   * @generated from field: bool disable_check = 9;
   */
  disableCheck: boolean;
};

/**
 * Describes the message cel.expr.conformance.test.TestCase.
 * Use `create(TestCaseSchema)` to create a new message.
 */
export const TestCaseSchema: GenMessage<TestCase> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 2);

/**
 * Input context proto for the test case
 *
 * @generated from message cel.expr.conformance.test.InputContext
 */
export type InputContext = Message<"cel.expr.conformance.test.InputContext"> & {
  /**
   * The type of input context for the test case
   *
   * @generated from oneof cel.expr.conformance.test.InputContext.input_context_kind
   */
  inputContextKind: {
    /**
     * A context message represents an input kind in the form of a proto
     * message whose type is defined at runtime.
     *
     * @generated from field: google.protobuf.Any context_message = 1;
     */
    value: Any;
    case: "contextMessage";
  } | {
    /**
     * A context expression representing a context proto variable. The
     * fields of the input proto.Messages are used as top-level variables within
     * an Activation. The expression is evaluated using the cel environment
     * configured for the test suite.
     *
     * @generated from field: string context_expr = 2;
     */
    value: string;
    case: "contextExpr";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.expr.conformance.test.InputContext.
 * Use `create(InputContextSchema)` to create a new message.
 */
export const InputContextSchema: GenMessage<InputContext> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 3);

/**
 * The input value for a variable binding
 *
 * @generated from message cel.expr.conformance.test.InputValue
 */
export type InputValue = Message<"cel.expr.conformance.test.InputValue"> & {
  /**
   * The type of input value that can be used for a variable binding
   *
   * @generated from oneof cel.expr.conformance.test.InputValue.kind
   */
  kind: {
    /**
     * A simple literal value for a variable binding
     *
     * @generated from field: cel.expr.Value value = 1;
     */
    value: Value;
    case: "value";
  } | {
    /**
     * An expression which evaluates to the value of the variable binding.
     * The expression is evaluated using the same runtime environment as the
     * one used for evaluating the expression under test.
     *
     * @generated from field: string expr = 2;
     */
    value: string;
    case: "expr";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.expr.conformance.test.InputValue.
 * Use `create(InputValueSchema)` to create a new message.
 */
export const InputValueSchema: GenMessage<InputValue> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 4);

/**
 * Expected result of the test case.
 *
 * @generated from message cel.expr.conformance.test.TestOutput
 */
export type TestOutput = Message<"cel.expr.conformance.test.TestOutput"> & {
  /**
   * Type of expected result of the test case.
   *
   * @generated from oneof cel.expr.conformance.test.TestOutput.result_kind
   */
  resultKind: {
    /**
     * A normal value, which must match the evaluation result exactly via value
     * equality semantics. This coincides with proto equality, except for:
     * *   maps are order-agnostic
     * *   a floating point NaN should match any NaN
     *
     * @generated from field: cel.expr.Value result_value = 8;
     */
    value: Value;
    case: "resultValue";
  } | {
    /**
     * An expression to be evaluated using the cel environment configured for
     * the test suite. The result of this expression must match the result of
     * the test case.
     *
     * @generated from field: string result_expr = 9;
     */
    value: string;
    case: "resultExpr";
  } | {
    /**
     * An error evaluation result set. Success if we match all of the errors in
     * the set.
     *
     * @generated from field: cel.expr.ErrorSet eval_error = 10;
     */
    value: ErrorSet;
    case: "evalError";
  } | {
    /**
     * An unknown evaluation result.
     *
     * @generated from field: cel.expr.UnknownSet unknown = 11;
     */
    value: UnknownSet;
    case: "unknown";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.expr.conformance.test.TestOutput.
 * Use `create(TestOutputSchema)` to create a new message.
 */
export const TestOutputSchema: GenMessage<TestOutput> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_suite, 5);

