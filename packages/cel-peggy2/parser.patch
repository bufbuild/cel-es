diff --git a/packages/cel-peggy2/src/parser.ts b/packages/cel-peggy2/src/parser.ts
index 2abc67d..bb981ec 100644
--- a/packages/cel-peggy2/src/parser.ts
+++ b/packages/cel-peggy2/src/parser.ts
@@ -58,28 +58,10 @@ namespace runtime {
     source: any;
     text: string;
   }
-  function hex(ch: string): string {
-    return ch.charCodeAt(0).toString(16).toUpperCase();
-  }
   export interface Expectation {
     type: "literal" | "class" | "any" | "end" | "pattern" | "other";
     value: string;
   }
-  function escape(s: string): string {
-    return s
-      .replace(/\\/g, "\\\\")
-      .replace(/"/g, '\\"')
-      .replace(/\0/g, "\\0")
-      .replace(/\t/g, "\\t")
-      .replace(/\n/g, "\\n")
-      .replace(/\r/g, "\\r")
-      .replace(/[\x00-\x0F]/g, function (ch) {
-        return "\\x0" + hex(ch);
-      })
-      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
-        return "\\x" + hex(ch);
-      });
-  }
   export class ParseFailure {}
   export class ParseOptions {
     currentPosition?: number;
@@ -505,12 +487,7 @@ const item610: runtime.Expectation = {
   value: "end of input",
 };
 type item105 = [string];
-type item146 = [string];
-type item148 = [string[]];
 type item222 = [string];
-type item275 = [
-  (number[] | "\u0007" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v" | string)[],
-];
 type item324 = [
   | string[]
   | (number[] | "\u0007" | "\b" | "\f" | "\n" | "\r" | "\t" | "\v" | string)[],
@@ -521,13 +498,9 @@ type item381 = [string];
 type item397 = [string, Expr[]];
 type item420 = [string, Expr];
 type item427 = [string, any[]];
-type item433 = [Expr];
-type item444 = [Expr[]];
 type item458 = [Expr, Expr];
-type item467 = [any[]];
 type item483 = [string];
 type item498 = [Expr];
-type item500 = [(prevExpr: Expr) => any];
 type item501 = [
   any | any | any | any | any | any | any | any | any | any | Expr | any | any,
   ((prevExpr: Expr) => any)[],
@@ -543,8 +516,6 @@ export function parse(
   input: string,
   options: runtime.ParseOptions = new runtime.ParseOptions(),
 ): Expr {
-  const parse$lines = input.split(/\r\n|\r|\n/);
-  const parse$totalLength = input.length;
   const parse$source = options.grammarSource;
   const result = item1(input);
   if (result.success === true) {
@@ -802,7 +773,7 @@ export function parse(
     offset: () => number,
     error: (s: string, l?: runtime.LocationRange) => void,
     name: string,
-    entries,
+    entries: any,
   ) {
     return builder.newStructExpr(offset(), entries, name);
   }
@@ -833,7 +804,7 @@ export function parse(
     text: () => string,
     offset: () => number,
     error: (s: string, l?: runtime.LocationRange) => void,
-    entries,
+    entries: any,
   ) {
     return builder.newStructExpr(offset(), entries);
   }
@@ -876,7 +847,7 @@ export function parse(
     text: () => string,
     offset: () => number,
     error: (s: string, l?: runtime.LocationRange) => void,
-    primary,
+    primary: any,
     tail: ((prevExpr: Expr) => any)[],
   ): Expr {
     /* : Expr */
