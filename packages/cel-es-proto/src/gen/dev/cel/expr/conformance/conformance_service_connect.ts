// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-connect-es v0.10.1 with parameter "target=ts,import_extension=none"
// @generated from file dev/cel/expr/conformance/conformance_service.proto (package dev.cel.expr.conformance, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CheckRequest, CheckResponse, EvalRequest, EvalResponse, ParseRequest, ParseResponse } from "./conformance_service_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Access a CEL implementation from another process or machine.
 * A CEL implementation is decomposed as a parser, a static checker,
 * and an evaluator.  Every CEL implementation is expected to provide
 * a server for this API.  The API will be used for conformance testing
 * and other utilities.
 *
 * @generated from service dev.cel.expr.conformance.ConformanceService
 */
export const ConformanceService = {
  typeName: "dev.cel.expr.conformance.ConformanceService",
  methods: {
    /**
     * Transforms CEL source text into a parsed representation.
     *
     * @generated from rpc dev.cel.expr.conformance.ConformanceService.Parse
     */
    parse: {
      name: "Parse",
      I: ParseRequest,
      O: ParseResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Runs static checks on a parsed CEL representation and return
     * an annotated representation, or a set of issues.
     *
     * @generated from rpc dev.cel.expr.conformance.ConformanceService.Check
     */
    check: {
      name: "Check",
      I: CheckRequest,
      O: CheckResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Evaluates a parsed or annotation CEL representation given
     * values of external bindings.
     *
     * @generated from rpc dev.cel.expr.conformance.ConformanceService.Eval
     */
    eval: {
      name: "Eval",
      I: EvalRequest,
      O: EvalResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

