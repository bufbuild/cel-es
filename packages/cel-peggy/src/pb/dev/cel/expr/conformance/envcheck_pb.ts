// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Tests for runtime support of standard functions.

// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=.js,ts_nocheck=false"
// @generated from file dev/cel/expr/conformance/envcheck.proto (package dev.cel.expr.conformance, syntax proto3)
/* eslint-disable */

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Decl } from "../checked_pb.js";

/**
 * The format of a standard environment, i.e. a collection of declarations
 * for the checker.
 *
 * @generated from message dev.cel.expr.conformance.Env
 */
export class Env extends Message<Env> {
  /**
   * Required.  The name of the environment.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The declarations in this environment.
   *
   * @generated from field: repeated dev.cel.expr.Decl decl = 2;
   */
  decl: Decl[] = [];

  constructor(data?: PartialMessage<Env>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dev.cel.expr.conformance.Env";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "decl", kind: "message", T: Decl, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Env {
    return new Env().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Env {
    return new Env().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Env {
    return new Env().fromJsonString(jsonString, options);
  }

  static equals(a: Env | PlainMessage<Env> | undefined, b: Env | PlainMessage<Env> | undefined): boolean {
    return proto3.util.equals(Env, a, b);
  }
}

